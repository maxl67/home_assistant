###############################################################################
#   @author       : Max Reigl
#   @date         : 08.10.2020
#   @package      : climate
#   @description  : heating, temperature, humidity
#   @links        : https://github.com/thomasloven/hass-config/wiki/Misc-tricks#cardelemententity-row-triality
# 
# remarks:
# - contains example of how to pass params from automation to script.
#   idea from: #https://community.home-assistant.io/t/how-do-you-use-service-template-when-different-services-use-different-attributes-solved/52314/15
###############################################################################

#todo: alarm
# feuchte > 60: warnung > 70 alarm
# draussen zu warm und heizen > alarm
# heizperiode an und april..oktober

#data
#22.12.: 
# Sonnenauf: 8:23-8:28 (MEWZ), 127,5-128,3°. 0,75-1,21°
# Mittag: 12:22 (MEWZ), 179,94°, 17,87°
# Untergang: 

################################################
##  Customize
################################################
homeassistant:
  customize:
  # definitions
    package.node_anchors:
      common: &common
        package: "climate"
      door: &door
        <<: *common
        icon: mdi:door-open
  # constants 
      hm_energy_saving_temp: &energy_saving_temp 17 #todo: wert evtl aus Thermostat auslesen
      hm_heating_off_temp: &heating_off_temp 4.5
      hm_default_profile: &default_profile 1
      hm_home_profile: &home_profile 2
      hm_guest_profile: &guest_profile 3
      thermostat_id_wz: &thermostat_id_wz 000C9A499B5808
      thermostat_entityid_wz: &thermostat_entityid_wz climate.000C9A499B5808
      thermostat_id_ku: &thermostat_id_ku 000A1A49A10BA3
      thermostat_entityid_ku: &thermostat_entityid_ku climate.000A1A49A10BA3
      thermostat_id_gz: &thermostat_id_gz 000a1a49a107b5
      thermostat_entityid_gz: &thermostat_entityid_gz climate.000a1a49a107b5
      # ...add new Thermostats here.
  # groups, variables
    group.doors_wz:
      <<: *door
    group.doors_kitchen_office:
      <<: *door
    group.doors_gz:
      <<: *door
    input_boolean.heating_period:
      <<: *common
    input_boolean.automate_heating:
      <<: *common
    switch.heating_period:
      <<: *common
    switch.enable_heating_automation:
      <<: *common
  # automations
    automation.activate_guest_heating:
      <<: *common
    #todo: rest...

###############################################################################
##  Groups
###############################################################################
group:
  # 'group.doors_*' fasst den Status der Türen in einem Raum zusammen.
  #   Ist ein Türsensor 'on'='Offen', dann wird die Gruppe 'on'.
  # Zustand der Gruppe wird an HomeMatic Thermostate geliefert (window_state)
  doors_wz:
    name: Wohnzimmer Türen 
    entities:
      - binary_sensor.lumi_lumi_sensor_magnet_aq2_03139f7b_1_6 #2 Wohnzimmer W
      - binary_sensor.lumi_lumi_sensor_magnet_aq2_9ac61c04_1_6 #3 Wohnzimmer S
      - binary_sensor.lumi_lumi_sensor_magnet_aq2_f2fd4604_1_6 #4 Esszimmer
      #- binary_sensor.lumi_lumi_sensor_magnet_aq2_4cc61c04_1_6 #5 Küche
  doors_kitchen_office:
    name: Türen Küche/Büro
    entities:
      - binary_sensor.lumi_lumi_sensor_magnet_aq2_4cc61c04_1_6 #5 Küche
      - binary_sensor.lumi_lumi_sensor_magnet_aq2_0aa90a04_on_off #6 Arbeitszimmer S
      - binary_sensor.lumi_lumi_sensor_magnet_aq2_0ee51c04_1_6 #7 Arbeitszimmer O
  doors_gz:
    name: Gästezimmer Türen 
    entities:
      - binary_sensor.lumi_lumi_sensor_magnet_aq2_031b3225_1_6 #1 Gästezimmer
    
###############################################################################
##  Variables
###############################################################################
input_boolean:
  # zum Aktivieren der Heizung allgemein
  heating_period:
    name: Heizperiode
    icon: mdi:radiator
  # aktiviert die Automatisierung der Heizungssteuerung
  automate_heating:
    name: automatische Heizsteuerung
    icon: mdi:robot

switch:
  - platform: template
    switches: ## are needed in addition to input_booleans to get a dynamic icon
      heating_period:
        friendly_name: Heizperiode aktiv #   
        value_template: "{% if not states('input_boolean.heating_period')=='unknown' %}{{ is_state('input_boolean.heating_period', 'on') }}{% endif %}"
        turn_on:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.heating_period
        turn_off:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.heating_period
        icon_template: >-
          {% if is_state('input_boolean.heating_period', 'on') %}
            mdi:radiator
          {% else %}
            mdi:radiator-off
          {% endif %}

      enable_heating_automation:
        friendly_name: Automatische Heizsteuerung #   
        value_template: "{% if not states('input_boolean.automate_heating')=='unknown' %}{{ is_state('input_boolean.automate_heating', 'on') }}{% endif %}"
        turn_on:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.automate_heating
        turn_off:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.automate_heating
        icon_template: >-
          {% if is_state('input_boolean.automate_heating', 'off') %}
            mdi:ghost-off-outline
          {% else %}
            mdi:ghost
          {% endif %}

###############################################################################
##  Scripts
###############################################################################
script:
  set_temperature_all:
    # Sets temperature <my_temperature> for all thermostats.
    #   my_temperature: float
    sequence:
      # Wohnzimmer
      - service: climate.set_temperature
        data:
          entity_id: *thermostat_entityid_wz
          temperature: "{{ my_temperature }}"
          hvac_mode: heat
      # Küche
      - service: climate.set_temperature
        data:
          entity_id: *thermostat_entityid_ku
          temperature: "{{ my_temperature }}"
          hvac_mode: heat
      # Gästezimmer
      - service: climate.set_temperature
        data:
          entity_id: *thermostat_entityid_gz
          temperature: "{{ my_temperature }}"
          hvac_mode: heat

  set_mode_all:
    # Sets mode <my_hvac_mode> for all thermostats.
    #   my_entity_id: climate.<id>
    #   my_hvac_mode: {auto|heat} #"off" does not work
    sequence:
      # Wohnzimmer
      - service: climate.set_hvac_mode
        data:
          entity_id: *thermostat_entityid_wz
          hvac_mode: "{{ my_hvac_mode }}"
      # Küche
      - service: climate.set_hvac_mode
        data:
          entity_id: *thermostat_entityid_ku
          hvac_mode: "{{ my_hvac_mode }}"
      # Gästezimmer
      - service: climate.set_hvac_mode
        data:
          entity_id: *thermostat_entityid_gz
          hvac_mode: "{{ my_hvac_mode }}"

  set_profile_all:
    # Sets profile <my_profile_no> for all thermostats.
    #   my_profile_no: {1|2|3} #has to be int
    sequence:
      # Wohnzimmer
      - service: script.set_profile_thermostat
        data:
          my_thermostat_id: *thermostat_id_wz
          my_profile_no: "{{ my_profile_no }}"
      # Küche
      - service: script.set_profile_thermostat
        data:
          my_thermostat_id: *thermostat_id_ku
          my_profile_no: "{{ my_profile_no }}"
      # Gästezimmer
      - service: script.set_profile_thermostat
        data:
          my_thermostat_id: *thermostat_id_gz
          my_profile_no: "{{ my_profile_no }}"
  set_profile_thermostat:
    # Sets profile <my_profile_no> for the thermostat <my_thermostat_id>.
    #   my_thermostat_id: climate.<id>
    #   my_profile_no: {1|2|3} #has to be int
    sequence:
      - service: homematic.set_device_value
        data:
          address: "{{ my_thermostat_id }}" 
          value: "{{ my_profile_no }}"
          value_type: 'int' #this new param is needed, because using a template will return a string value otherwise. 
          channel: 1
          param: "ACTIVE_PROFILE"
          interface: "hmip"

  set_windowstate_thermostat:
    # Sets window state <my_window_state> for the thermostat <my_thermostat_id>.
    #   my_thermostat_id: climate.<id>
    #   my_window_state: {0|1} #has to be int
    mode: queued
    sequence:
      - service: homematic.set_device_value
        data:
          address: "{{ my_thermostat_id }}" 
          value: "{{ my_window_state }}"
          value_type: 'int' #this new param is needed, because using a template will return a string value otherwise. 
          channel: 1
          param: "WINDOW_STATE"
          interface: "hmip"

###############################################################################
##  Automations
###############################################################################
automation:
  #-------------------------------
  # Hinweis, dass bei Kälte noch eine Tür offen ist
  - id: warning_door_open_in_winter
    alias: Lichtband Status Tür in Winter schliessen
    mode: single #Do not start a new run, if running already. 
    trigger: 
      - platform: time_pattern
        minutes: '/3'
    condition:
      # wenn in der Heizperiode eine Tür offen ist und es draussen kalt ist
      condition: and
      conditions:
        # Heizperiode ist an
        - condition: state
          entity_id: input_boolean.heating_period
          state: 'on'
        # eine Terassentür ist offen
        - condition: state
          entity_id: group.all_doors
          state: 'on'
        # Aussentemperatur (DWD) kleiner als die im WZ gemessene Temperatur
        - "{{ state_attr('weather.dwd_weather_ak_stuttgart', 'temperature')|float(default=0) < state_attr('climate.000C9A499B5808', 'current_temperature')|float(default=0) }}" 
        # Licht-Automation aktiv
        - condition: state
          entity_id: input_boolean.disable_light_automation
          state: 'off'
        # nicht wenn Eingangstür offen und die Signal-Ampel an
        - condition: state
          entity_id: input_boolean.ll_signals_doorstatus
          state: 'off'
        - condition: state
          entity_id: group.entrance_door
          state: 'off'
    action:
      # speichern des aktuellen Licht-Zustands...
      - service: python_script.light_store
        data:
          store_name: dw_signal_store
          entity_id:
            - light.philips_lightstrip_ku
          overwrite: false
          all_attribs: true  #saves last color and brightness, even if state='off'. turn light on shortly
      # Licht in blau blinken lassen
      - service: light.turn_on
        data:
          entity_id: light.philips_lightstrip_ku
          brightness: 255
          rgb_color:  [0, 0, 255] #blau
          transition: 0.1
      - alias: "Lichtleiste blinken lassen"
        service: script.flash_light
        data:
          light: philips_lightstrip_ku #hier ohne domain 'light.'
          count: 8
      - wait_template: "{{ not states('dw_signal_store.light_philips_lightstrip_ku') == 'unknown' }}"
        timeout: '00:00:03'
      - choose:
        - conditions: "{{ wait.completed }}" #wait condition was met = entity existes
          sequence:
            - service: python_script.light_store
              data:
                store_name: dw_signal_store
                operation: restore
                all_attribs: true  #restores old color and brightness, even if state='off'
        default: #wait condition not met = entity does not exist
          - service: light.turn_off #just turn off light
            entity_id: light.philips_lightstrip_ku

  #-------------------------------
  # Homeoffice - Profil 2 statt 1
  - id: switch_to_homeofficeprofile
    alias: Heizprofil Home-Office
    trigger:
      - platform: time
        at: 
          - '09:00:00'
          - '09:30:00'
          - '10:00:00'
          - '10:30:00'
          - '11:00:00'
          - '11:30:00'
          - '13:30:00'
          - '14:00:00'
          - '14:30:00'
          - '15:00:00'
          - '15:30:00'
          - '16:00:00'
          - '16:30:00'
     # - platform: state
     #   entity_id: 
     #     - sensor.max_status
     #     - sensor.ing_status
    condition:
      condition: and
      conditions:
        # nur bei aktiver Heizperiode UND aktiver Automatisierung
        - condition: state
          entity_id: input_boolean.heating_period
          state: 'on'
        - condition: state
          entity_id: input_boolean.automate_heating
          state: 'on'
        # und Arbeitstagen
        - condition: state
          entity_id: binary_sensor.workday_sensor
          state: 'on'
    action:
      # Max-Arbeitszimmer
      - choose:
        - conditions:
            - condition: state
              entity_id: sensor.max_status
              state: 
                - 'Home'
                - 'Just Arrived'
          sequence:
            # Wochenprofil 2
            - service: script.set_profile_thermostat
              data:
                my_thermostat_id: *thermostat_id_gz
                my_profile_no: *home_profile
        default: 
          # Wochenprofil 1
          - service: script.set_profile_thermostat
            data:
              my_thermostat_id: *thermostat_id_gz
              my_profile_no: *default_profile
      # Ing-Büro
      - choose:
        - conditions:
            - condition: state
              entity_id: sensor.ing_status
              state: 
                - 'Home'
                - 'Just Arrived'
          sequence:
            # Wochenprofil 2
            - service: script.set_profile_thermostat
              data:
                my_thermostat_id: *thermostat_id_ku
                my_profile_no: *home_profile
        default: 
          # Wochenprofil 1
          - service: script.set_profile_thermostat
            data:
              my_thermostat_id: *thermostat_id_ku
              my_profile_no: *default_profile
      # Wohnzimmer
      - choose:
        - conditions:
            - condition: state
              entity_id: sensor.home_status
              state: 
                - 'Home'
          sequence:
            # Wochenprofil 2
            - service: script.set_profile_thermostat
              data:
                my_thermostat_id: *thermostat_id_wz
                my_profile_no: *home_profile
        default: 
          # Wochenprofil 1
          - service: script.set_profile_thermostat
            data:
              my_thermostat_id: *thermostat_id_wz
              my_profile_no: *default_profile

  #-----------------------------
  # anderes Heizprofil für Gäste
  - id: activate_guest_heating
    alias: Change to guest heating profile
    trigger:
      - platform: state
        entity_id: input_boolean.guests
        to: "on"
    condition:
      # nur bei aktiver Heizperiode UND aktiver Automatisierung
      condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.heating_period
        state: 'on'
      - condition: state
        entity_id: input_boolean.automate_heating
        state: 'on'
    action:
      # Automatik-Modus
      - service: script.set_mode_all
        data:
          my_hvac_mode: auto
      # Wochenprofil 3
      - service: script.set_profile_all
        data:
          my_profile_no: *guest_profile
  # normales Heizprofil für uns (ohne Gäste)
  - id: restore_family_heating
    alias: Change to normal heating profile
    trigger:
      - platform: state
        entity_id: input_boolean.guests
        to: "off"
    condition:
      # nur bei aktiver Heizperiode und aktiver Automatisierung
      condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.heating_period
        state: 'on'
      - condition: state
        entity_id: input_boolean.automate_heating
        state: 'on'
    action:
      # Wochenprofil 1
      - service: script.set_profile_all
        data:
          my_profile_no: *default_profile

  #----------------------------------------------------------------------------------
  # Offene Fenster-Erkennung 
  # mindestens eine Tür in <Zimmer> auf --> Fensterstatus im Thermostat auf 1 setzen.
  - id: thermo_set_window_open
    alias: Set thermostat window state 'open'
    mode: queued
    trigger:
      - platform: state
        entity_id: 
          - group.doors_wz
          - group.doors_kitchen_office
          - group.doors_gz
        to: "on"
    condition:
      # nur bei aktiver Heizperiode und aktiver Automatisierung
      condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.heating_period
        state: 'on'
      - condition: state
        entity_id: input_boolean.automate_heating
        state: 'on'
    action:
      - choose:
        # WOHNZIMMER
        - conditions: "{{ trigger.entity_id == 'group.doors_wz' }}"
          sequence:
          - service: script.set_windowstate_thermostat
            data:
              my_thermostat_id: *thermostat_id_wz 
              my_window_state: 1 # =offen
        # Küche/Büro
        - conditions: "{{ trigger.entity_id == 'group.doors_kitchen_office' }}"
          sequence:
          - service: script.set_windowstate_thermostat
            data:
              my_thermostat_id: *thermostat_id_ku 
              my_window_state: 1 # =offen
        # GÄSTEZIMMER
        - conditions: "{{ trigger.entity_id == 'group.doors_gz' }}"
          sequence:
          - service: script.set_windowstate_thermostat
            data:
              my_thermostat_id: *thermostat_id_gz  
              my_window_state: 1 # =offen 
  
  # alle Türen in <Zimmer> zu --> Fensterstatus im Thermostat auf 0 setzen.
  # alle 10 Minuten ebenfalls prüfen, ob das Fenster-zu Flag gesetzt ist.
  - id: thermo_set_window_closed
    alias: Set thermostat window state 'closed'
    mode: queued
    trigger:
      - platform: state
        # id: 0
        entity_id: 
          - group.doors_wz
          - group.doors_kitchen_office
          - group.doors_gz
        to: "off"
      # regelmässig prüfen, weil gelegentlich ein Event verpasst wird
      - platform: time_pattern
        minutes: '/10'
    condition:
      # nur bei aktiver Heizperiode (Fenster-Status wieder 'zu' auch ohne aktive Automatisierung)
      - condition: state
        entity_id: input_boolean.heating_period
        state: 'on'
      # nur, wenn ein Thermostat ein Fenster-offen-Flag hat (um Log Einträge alle 10min zu vermeiden)
      - condition: or
        conditions:
          # in jedem Fall aufrufen, wenn Tür geschlossen wurde
          - condition: trigger
            id: '0'
          # bei Time-Trigger nur aufrufen, wenn ein Fenster-Flag offen ist
          - condition: or
            conditions:
              - condition: state
                entity_id:  sensor.hm_thermo_wz_window_state
                state: 'offen' 
              - condition: state
                entity_id: sensor.hm_thermo_gz_window_state
                state: 'offen' 
              - condition: state
                entity_id: sensor.hm_thermo_ku_window_state
                state: 'offen' 
    action:
      - choose:
        # WOHNZIMMER
        - conditions: "{{ trigger.entity_id == 'group.doors_wz' or (is_state('group.doors_wz','off') and is_state('sensor.hm_thermo_wz_window_state','offen')) }}"
          sequence:
          - service: script.set_windowstate_thermostat
            data:
              my_thermostat_id: *thermostat_id_wz 
              my_window_state: 0 # =geschlossen
        # Küche/Büro
        - conditions: "{{ trigger.entity_id == 'group.doors_kitchen_office' or (is_state('group.doors_kitchen_office','off') and is_state('sensor.hm_thermo_ku_window_state','offen')) }}"
          sequence:
          - service: script.set_windowstate_thermostat
            data:
              my_thermostat_id: *thermostat_id_ku 
              my_window_state: 0 # =geschlossen
        # GÄSTEZIMMER
        - conditions: "{{ trigger.entity_id == 'group.doors_gz' or (is_state('group.doors_gz','off') and is_state('sensor.hm_thermo_gz_window_state','offen')) }}"
          sequence:
          - service: script.set_windowstate_thermostat
            data:
              my_thermostat_id: *thermostat_id_gz  
              my_window_state: 0 # =geschlossen

  #-------------------------------------------------------
  # pause & resume heating when leaving and returning home
  - id: pause_heating_when_leaving
    alias: Pause heating when leaving
    trigger:
      - platform: state
        entity_id: sensor.home_status
        from: 'Home'
        to: 'Away'
        for:
          minutes: 5
    condition:
      condition: and
      conditions:
      # nur bei aktiver Heizperiode und aktiver Automatisierung
      - condition: state
        entity_id: input_boolean.heating_period
        state: 'on'
      - condition: state
        entity_id: input_boolean.automate_heating
        state: 'on'
    action:
      # Manuell-Modus
      - service: script.set_mode_all
        data:
          my_hvac_mode: heat
      # Ziel-Temperatur auf Energiespar-Wert
      - service: script.set_temperature_all
        data:
          my_temperature: *energy_saving_temp

  - id: resume_heating_when_arriving
    alias: Resume heating when arriving
    trigger:
      - platform: state
        entity_id: sensor.home_status
        to: 'Home'
    condition:
      # nur bei aktiver Heizperiode und aktiver Automatisierung
      condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.heating_period
        state: 'on'
      - condition: state
        entity_id: input_boolean.automate_heating
        state: 'on'
    action:
      # Automatik-Modus
      - service: script.set_mode_all
        data:
          my_hvac_mode: auto

  #----------------------------------------
  # Start and End of heating period: 
  #   start: turn on automatic mode
  #   end:   set manuell mode to temp=4.5°C
  - id: stop_heating
    alias: Ende der Heizperiode 
    trigger:
      - platform: state
        entity_id: input_boolean.heating_period
        to: "off"    
    action:
      # stop 'start_heating'
      - service: automation.turn_off
        entity_id: automation.start_heating
      - service: automation.turn_on
        entity_id: automation.start_heating
      # Manuell-Modus ('Aus' geht nicht) und...
      - service: script.set_mode_all
        data:
          my_hvac_mode: heat
      # ...Ziel-Temperatur 'sehr gering'
      - service: script.set_temperature_all
        data:
          my_temperature: *heating_off_temp

  - id: start_heating
    alias: Start der Heizperiode
    trigger:
      - platform: state
        entity_id: input_boolean.heating_period
        to: "on"
    action:
      # stop 'stop_heating'
      - service: automation.turn_off
        entity_id: automation.stop_heating
      - service: automation.turn_on
        entity_id: automation.stop_heating
      # Voreinstellung für 'heat'-Modus
      - service: script.set_temperature_all
        data:
          my_temperature: 20
      - delay: '00:00:02'
      # Automatik-Modus
      - service: script.set_mode_all
        data:
          my_hvac_mode: auto
      - delay: '00:00:02'
      # Wochenprofil 1
      - service: script.set_profile_all
        data:
          my_profile_no: *default_profile
      - delay: '00:00:02'
      # Fensterstatus auf 'zu' setzen (falls noch offen)
      # Wohnzimmer
      - service: script.set_windowstate_thermostat
        data:
          my_thermostat_id: *thermostat_id_wz  
          my_window_state: "{{ 1 if is_state('group.doors_wz', 'on') else 0 }}" #0=geschlossen, 1=offen
      # Küche
      - service: script.set_windowstate_thermostat
        data:
          my_thermostat_id: *thermostat_id_ku  
          my_window_state: "{{ 1 if is_state('group.doors_kitchen_office', 'on') else 0 }}" #0=geschlossen, 1=offen
      # Gästezimmer
      - service: script.set_windowstate_thermostat
        data:
          my_thermostat_id: *thermostat_id_gz  
          my_window_state: "{{ 1 if is_state('group.doors_gz', 'on') else 0 }}" #0=geschlossen, 1=offen