###############################################################################
#   @author       : Max Reigl
#   @changed      : 16.10.2024
#   @created      : 12.11.2019
#   @package      : fritzbox
#   @description  : Monitoring of FritzBox router and Fritz smart home components
#   @links        : https://git.truenoobs.de/darthsandmann/homeassistant/src/branch/master/disabled/packages/fritzbox.yaml
###############################################################################

################################################
##  Customize
################################################

homeassistant:
  customize:
  # definitions
    package.node_anchors:
      common: &common
        package: "fritzbox"
  # constants 
      # entity-id's
      ambientelight_wz_entityid: &ambientelight_wz_entityid light.dimmschalter_wz_dimmaktor_wz 
      light_az_entityid: &light_az_entityid light.dimmschalter_buro_dimmaktor_buro  
      colorlight_ku_entityid: &colorlight_ku_entityid light.philips_lightstrip_ku
      powerswitch_tv_entityid: &powerswitch_tv_entityid switch.outlet_repeater_hifi_switch
      powerswitch_rpi_sued_entityid: &powerswitch_rpi_sued_entityid switch.outlet_repeater_wz_018780fe_on_off
  # sensors
    sensor.fritzbox_uptime:
      <<: *common
    sensor.fritz_rate_up:
      <<: *common
    sensor.fritz_rate_down:
      <<: *common
    sensor.fritz_rate_up_max:
      <<: *common
    sensor.fritz_rate_down_max:
      <<: *common
        
################################################
##   Platforms
################################################
## Fritzbox Smart Home (now Config > Integrations)
#fritzbox:
#  devices:
#    - host: !secret fritz_host
#      username: !secret fritz_home_username
#      password: !secret fritz_home_password 

## Fritzbox Network Monitoring (now Config > Integrations)
# this option must be activated in FritzBox
#   Heimnetz > Netzwerk > Netzwerkeinstellungen > Heimnetzfreigaben
#     > Statusinformationen 端ber UPnP 端bertragen
#sensor:
#  - platform: fritzbox_netmonitor
#    host: !secret fritz_host_ip
#    name: fritzbox


###############################################################################
##  Sensors
###############################################################################
# todo: umstellen aus Template > Sensor (neue Form)
sensor:
  - platform: template
    sensors:
      fritzbox_uptime:
        friendly_name: "Uptime"
        value_template: "{{ ( (as_timestamp(now())|int(default=0) - as_timestamp(states('sensor.fritz_box_6490_cable_device_uptime'))|int(default=0)) / (60*60*24)) | round(0) }}"
        unit_of_measurement: "days"
        icon_template: mdi:restart
      fritz_rate_up: #Current upstream speed in Kbytes/s
        friendly_name: "Upload"
        value_template: "{{ (states('sensor.fritz_box_6490_cable_kb_s_sent')|int(default=0) / 1024 * 8)|round(1) }}"
        icon_template: mdi:cloud-upload
        unit_of_measurement: "MBit/s"
      fritz_rate_down: #Current downstream speed in Kbytes/s
        friendly_name: "Download"
        value_template: "{{ (states('sensor.fritz_box_6490_cable_kb_s_received')|int(default=0) / 1024 * 8)|round(1) }}"
        icon_template: mdi:cloud-download
        unit_of_measurement: "MBit/s"
      fritz_rate_up_max: #Maximum upstream-rate in bytes/s
        friendly_name: "Upload Max"
        value_template: "{{ (states('sensor.fritz_box_6490_cable_max_kbit_s_sent')|int(default=0) / 1024)|round(1) }}"
        icon_template: mdi:transfer-up
        unit_of_measurement: "MB/sec"
      fritz_rate_down_max: #Maximum downstream-rate in bytes/s
        friendly_name: "Download Max"
        value_template: "{{ (states('sensor.fritz_box_6490_cable_max_kbit_s_received')|int(default=0) / 1024)|round(1) }}"
        icon_template: mdi:transfer-down
        unit_of_measurement: "MB/sec"

###############################################################################
##  Scripts
###############################################################################
script:
  fritzbox_reconnect:
    alias: "Reconnect Fritz!Box"
    sequence:
      - action: fritz.reconnect
        data:
          device_id: !secret fritzbox_device_id

  fritzbox_reboot:
    alias: "Reboot Fritz!Box"
    sequence:
      - action: fritz.reboot
        data:
          device_id: !secret fritzbox_device_id

###############################################################################
##  Automations
###############################################################################
automation:
  #-------------------------------
  # Fritz-DECT 440 Button
  # Webhook Trigger f端r Licht (1)
  - id: toggle_lights
    alias: Button Lichter an/aus
    description: ''
    mode: single #Do not start a new run, if running already. 
    triggers:
      - id: 'toggle_licht_az'
        trigger: webhook
        webhook_id: 'toggle_light_buero'
        allowed_methods:
          - POST
        local_only: true #Definition des webkook mit https://<ip>:port>/api/webhook/<id>
      - id: 'toggle_licht_wz'
        trigger: webhook
        webhook_id: 'toggle_light_wz'
        allowed_methods:
          - POST
        local_only: true #Definition des webkook mit https://<ip>:port>/api/webhook/<id>
      - id: 'status_light_off'
        trigger: webhook
        webhook_id: 'switch_off_ampel'
        allowed_methods:
          - POST
        local_only: true #Definition des webkook mit https://<ip>:port>/api/webhook/<id>
    variables:
      device_map:
        'toggle_licht_az': *light_az_entityid
        'toggle_licht_wz': *ambientelight_wz_entityid
        'status_light_off': *colorlight_ku_entityid
      light_entity_id: >-
        {{ device_map[trigger.id] }}        
    actions:
      # - action: "light.turn_{{ 'on' if is_state(light_entity_id, 'off') else 'off' }}"
      #   data_template: 
      #     entity_id: "{{ light_entity_id }}"
      - if:
          - alias: light is off
            condition: template
            value_template: "{{ is_state(light_entity_id, 'off') and not trigger.id=='status_light_off' }}"
        then:
          - action: light.turn_on
            data_template: 
              entity_id: "{{ light_entity_id }}"
              brightness_pct: 50
        else:      
          - action: light.turn_off
            data_template:
              entity_id: "{{ light_entity_id }}"

  - id: dimm_lights
    alias: Button Lichter dimmen
    description: ''
    mode: single #Do not start a new run, if running already. 
    triggers:
      - id: 'dimm_lights_darker'
        trigger: webhook
        webhook_id: 'lights_dunkler'
        allowed_methods:
          - POST
        local_only: true #Definition des webkook mit https://<ip>:port>/api/webhook/<id>
      - id: 'dimm_lights_brighter'
        trigger: webhook
        webhook_id: 'lights_heller'
        allowed_methods:
          - POST
        local_only: true #Definition des webkook mit https://<ip>:port>/api/webhook/<id>
    variables:
      value_map:
        'dimm_lights_darker': -10
        'dimm_lights_brighter': 10
      brightness_increment: >-
        {{ value_map[trigger.id] }}        
    actions:
      - if:
          - alias: AZ light is on
            condition: state
            entity_id: *light_az_entityid
            state: 'on'
        then:
          - action: light.turn_on
            data_template: 
              entity_id: *light_az_entityid
              brightness_step_pct: "{{ brightness_increment }}"
              transition: 1
      - if:
          - alias: WZ light is on
            condition: state
            entity_id: *ambientelight_wz_entityid
            state: 'on'
        then:
          - action: light.turn_on
            data_template: 
              entity_id: *ambientelight_wz_entityid
              brightness_step_pct: "{{ brightness_increment }}"
              transition: 1

 #-------------------------------
  # Fritz-DECT 440 Button
  # Webhook Trigger f端r Power (2)
  - id: toggle_power
    alias: Button Power an/aus
    description: ''
    mode: single #Do not start a new run, if running already. 
    triggers:
      - id: 'turn_on_tv'
        trigger: webhook
        webhook_id: 'switch_on_tv'
        allowed_methods:
          - POST
        local_only: true #Definition des webkook mit https://<ip>:port>/api/webhook/<id>
    variables:
      device_map:
        'turn_on_tv': *powerswitch_tv_entityid
      switch_entity_id: >-
        {{ device_map[trigger.id] }}        
    actions:
      - action: switch.turn_on
        data_template: 
          entity_id: "{{ switch_entity_id }}"
