###############################################################################
#   @author       : Max Reigl
#   @date         : 17.11.2021
#   @package      : weather
#   @description  : all kinds of weather information
#   @links        : 
## Satelitenbilder
# https://www.qxm.de/digitalewelt/3014/animierte-satellitenbilder-in-home-assistant
## DWD
# https://community.home-assistant.io/t/dwd-warnapp-sensor-amtliche-warnungen-des-deutschen-wetterdienstes/22699
# https://community.home-assistant.io/t/dwd-global-weather-warning-integration/17165/9
# https://www.dwd.de/DE/wetter/warnungen_aktuell/objekt_einbindung/objekteinbindung.html
###############################################################################
#Sonnenuntergang real:
  #24.11   16:15

################################################
##  Customize
################################################
homeassistant:
  customize:
  # definitions
    package.node_anchors:
      common: &common
        package: 'weather'
    sun.sun:
      friendly_name: Sonnenstand
      <<: *common
  # groups, variables
    input_select.type_of_satelite:
      <<: *common
    input_boolean.dwd_weather_alert:
      <<: *common
  # sensors
    sensor.outside_temperature:
      <<: *common
    sensor.outside_humidity:
      <<: *common
    sensor.sun_direction:
      <<: *common
    sensor.sun_elevation:
      <<: *common
    sensor.sun_is_shining:
      <<: *common
    sensor.sunshine_intensity:
      <<: *common
    #sensor.dwd*
  # automations
    automation.send_dwd_warning:
      <<: *common
    automation.reset_dwd_warning:
      <<: *common
    script.send_dwd_warn_mail:
      <<: *common
    shell_command.get_warn_image:
      <<: *common

################################################
##   Platforms
################################################
sun: 

# get live satelite pictures
camera:
#  - platform: generic
#    name: selected_satelite
#    still_image_url: >
#      {{ {
#          'Regen' : 'https://api.sat24.com/animated/EU/visual/1/W_dot_%20Europe%20Standard%20Time/2937470',
#          'Bewölkung' : 'https://api.sat24.com/animated/ALPS/rainTMC/1/W_dot_%20Europe%20Standard%20Time/3381693',
#          'Schnee' : 'https://api.sat24.com/animated/ALPS/snow/1/W_dot_%20Europe%20Standard%20Time/8170881'
#         } [input_select.type_of_satelite] }}
  - platform: generic
  #  still_image_url: http://api.sat24.com/animated/DE/visual/2/W_dot_%20Europe%20Standard%20Time/5053188
    still_image_url: https://api.sat24.com/animated/EU/visual/1/W_dot_%20Europe%20Standard%20Time/2937470
    name: satelite_clouds
  - platform: generic
  #  still_image_url: http://api.sat24.com/animated/DE/rainTMC/2/W_dot_%20Europe%20Standard%20Time/220026
    still_image_url: https://api.sat24.com/animated/ALPS/rainTMC/1/W_dot_%20Europe%20Standard%20Time/3381693
    name: satelite_rain
  - platform: generic
    still_image_url: https://api.sat24.com/animated/ALPS/snow/1/W_dot_%20Europe%20Standard%20Time/8170881
    name: satelite_snow


###############################################################################
##  Variables
###############################################################################
input_select:
  # selection of which satelite picture to show
  type_of_satelite:
    name: Auswahl
    options:
      - Regen
      - Bewölkung
      - Schnee
    initial: Regen

# value to remember if a alert is active (alert=message to phone and badge+=1)
input_boolean:
  dwd_weather_alert:
    name: DWD Warnung   #active weather warning
    icon: mdi:weather-cloudy-alert

###############################################################################
##  Sensors
###############################################################################
sensor:
  - platform: template
    sensors:
      # temp: from dwd_weather, should be a own sensor outside
      outside_temperature: 
        value_template: "{{ state_attr('weather.dwd_weather_ak_stuttgart', 'temperature')|float(default=0) }}"
        unit_of_measurement: '°C'
        friendly_name: Außentemperatur
      outside_humidity:
        value_template: "{{ state_attr('weather.dwd_weather_ak_stuttgart', 'humidity')|int(default=0) }}"
        unit_of_measurement: '%'
        friendly_name: Luftfeuchte außen
      #outside_visibility:
      #  value_template: "{{ state_attr('weather.dwd_weather_ak_stuttgart', 'visibility')|float(default=0) }}"
      #  unit_of_measurement: '%'
      #  friendly_name: Sicht
      sun_direction:
        value_template: "{{ state_attr('sun.sun', 'azimuth')|float(default=0) }}"
        unit_of_measurement: '°'
        friendly_name: Sonnenrichtung
      sun_elevation:
        value_template: "{{ state_attr('sun.sun', 'elevation')|float(default=0) }}"
        unit_of_measurement: '°'
        friendly_name: Sonnenhöhe
      sun_is_shining:
        value_template: "{{ (states('weather.dwd_weather_ak_stuttgart') in ('sunny','partlycloudy') and states('weather.home_hourly') in ('sunny','partlycloudy')) and state_attr('sun.sun', 'elevation') >= 2.5 }}"
        friendly_name: Sonne scheint
      sunshine_intensity:
        value_template: >
          {% if is_state('sensor.sun_is_shining', 'True') %}
            {{ (state_attr('sun.sun', 'elevation')/90*100)|int(default=0) }}
          {% else %}
            0
          {% endif %}
        unit_of_measurement: '%'
        friendly_name: Sonnenintensität
        # {{ state_attr('weather.dwd_weather_ak_stuttgart', 'visibility') }}

  # Statistik-Analyse
  - platform: history_stats
    name: sunshine_hours_yesterday
    #name: "Sonnenstunden gestern"
    entity_id: sensor.sun_is_shining
    state: true
    type: time
    # end today at 00:00:00
    end: >
      {{ now().replace(hour=0, minute=0, second=0) }}
    # start 24h before the end time
    duration:
      hours: 24
  - platform: history_stats
    name: sunshine_hours_today
    entity_id: sensor.sun_is_shining
    state: true
    type: time
    # start today at 00:00:00
    start: >
      {{ now().replace(hour=0, minute=0, second=0) }}
    # start 24h before the end time
    end: >
      {{ now() }}
  - platform: template
    sensors:
      forcast_sunshine_hours_today:
        friendly_name: restliche Sonnenstunden heute 
        value_template: >
          {% set sunH = namespace(value=0) %}
          {% set sunset_today = today_at(as_datetime(state_attr('sun.sun', 'next_setting')).strftime('%H:%M')) %}
          {% for h_forecast in state_attr('weather.home_hourly', 'forecast') %}
            {% if h_forecast.condition == 'sunny' and as_datetime(h_forecast.datetime) < sunset_today %}
              {% set sunH.value = sunH.value + 1 %}
            {% endif %}
          {% endfor %}
          {{ sunH.value }}
        unit_of_measurement: 'h'
      forcast_sunshine_hours_tomorrow:
        friendly_name: Sonnenstunden morgen 
        value_template: >
          {% set sunH = namespace(value=0) %}
          {% set sunrise_tomorrow = today_at(as_datetime(state_attr('sun.sun', 'next_rising')).strftime('%H:%M')) + timedelta(days=1) %}
          {% set sunset_tomorrow = today_at(as_datetime(state_attr('sun.sun', 'next_setting')).strftime('%H:%M')) + timedelta(days=1) %}
          {% for h_forecast in state_attr('weather.home_hourly', 'forecast') %}
            {% if h_forecast.condition == 'sunny' and as_datetime(h_forecast.datetime) > sunrise_tomorrow and as_datetime(h_forecast.datetime) < sunset_tomorrow %}
              {% set sunH.value = sunH.value + 1 %}
            {% endif %}
          {% endfor %}
          {{ sunH.value }}
        unit_of_measurement: 'h'

  - platform: dwd_weather_warnings
    region_name: !secret dwd_region_name
    # https://www.home-assistant.io/integrations/dwd_weather_warnings/
    # https://www.dwd.de/DE/leistungen/opendata/help/warnungen/warning_codes_pdf.pdf?__blob=publicationFile&v=5
    # Typen der Warnungen
    # 0: Gewitter, Starkes Gewitter
    # 1: Windböen, Sturmböen, schwere Sturmböen
    # 2: Dauerregen
    # 3: Schneefall (leichten, )
    # 4: Nebel
    # 5: Frost
    # 6: Glätte, Glatteis
    # 8: Hitze (always level 50)
    # 9: UV-Index (always level 20)

  - platform: template
    sensors:
      # Anzahl und Gesamtlevel der DWD-Warnungen
      dwd_current_warn_count:
        value_template: "{{ state_attr('sensor.dwd_weather_warnings_current_warning_level','warning_count') }}"
        icon_template: mdi:alert-outline
      dwd_current_warn_level:
        value_template: "{{ states('sensor.dwd_weather_warnings_current_warning_level') }}"
        icon_template: mdi:network-strength-1-alert
      dwd_advance_warn_count:
        value_template: "{{ state_attr('sensor.dwd_weather_warnings_advance_warning_level','warning_count') }}"
        icon_template: mdi:alert
      # maximaler Level der aktuellen Warnungen
      dwd_max_warn_level:
        value_template: >
          {%- set ns = namespace(level=0) -%}
          {%- for i in range(0, state_attr('sensor.dwd_weather_warnings_current_warning_level','warning_count')) -%}
            {%- set lvl_attr=  'warning_'+loop.index|string + '_level' -%}
            {%- set ns.level = (ns.level, state_attr('sensor.dwd_weather_warnings_current_warning_level',lvl_attr))|max  -%}
          {%- endfor -%}
          {{ns.level}}
        icon_template: mdi:network-strength-3-alert

      # DWD-Warnstufen nach Typen getrennt mit zugehörigem Level
      dwd_current_warn_gewitter:
        friendly_name: "Gewitter"
        value_template: >
          {% set ns = namespace(found='off') %}
          {% for attr in states.sensor.dwd_weather_warnings_current_warning_level.attributes if attr.endswith('_type') -%}
              {% if states.sensor.dwd_weather_warnings_current_warning_level.attributes[attr] in [0, 31, 33, 34, 36, 38, 40, 41, 42, 44, 45, 46, 48, 49, 90, 91, 92 ,93, 95, 96] %}
                  {% set ns.found = 'on' %}
              {% endif %}
          {% endfor %}
          {{ns.found}}
        icon_template: mdi:weather-lightning-rainy
      dwd_current_warn_level_gewitter:
        friendly_name: "Gewitter Stufe"
        value_template: >
          {%- set ns = namespace(level=0) -%}
          {%- for i in range(0, states.sensor.dwd_weather_warnings_current_warning_level.attributes.warning_count) -%}
            {%- set type_attr= 'warning_'+loop.index|string + '_type' -%}
            {%- set lvl_attr=  'warning_'+loop.index|string + '_level' -%}
            {%- if states.sensor.dwd_weather_warnings_current_warning_level.attributes[type_attr] in [0, 31, 33, 34, 36, 38, 40, 41, 42, 44, 45, 46, 48, 49, 90, 91, 92 ,93, 95, 96] -%}
               {%- set ns.level = (ns.level, states.sensor.dwd_weather_warnings_current_warning_level.attributes[lvl_attr])|max  -%}
            {%- endif -%}
          {%- endfor -%}
          {{ns.level}}
        icon_template: mdi:weather-lightning-rainy

      dwd_current_warn_sturm:
        friendly_name: "Sturm"
        value_template: >
          {% set ns = namespace(found='off') %}
          {% for attr in states.sensor.dwd_weather_warnings_current_warning_level.attributes if attr.endswith('_type') -%}
              {% if states.sensor.dwd_weather_warnings_current_warning_level.attributes[attr] in [1, 40, 41, 44, 45, 48, 51, 52, 53, 54, 55, 56, 96] %}
                  {% set ns.found = 'on' %}
              {% endif %}
          {% endfor %}
          {{ns.found}}
        icon_template: mdi:weather-windy
      dwd_current_warn_level_sturm:
        friendly_name: "Sturm Stufe"
        value_template: >
          {%- set ns = namespace(level=0) -%}
          {%- for i in range(0, states.sensor.dwd_weather_warnings_current_warning_level.attributes.warning_count) -%}
            {%- set type_attr= 'warning_'+loop.index|string + '_type' -%}
            {%- set lvl_attr=  'warning_'+loop.index|string + '_level' -%}
            {%- if states.sensor.dwd_weather_warnings_current_warning_level.attributes[type_attr] in [1, 40, 41, 44, 45, 48, 51, 52, 53, 54, 55, 56, 96] -%}
               {%- set ns.level = (ns.level, states.sensor.dwd_weather_warnings_current_warning_level.attributes[lvl_attr])|max  -%}
            {%- endif -%}
          {%- endfor -%}
          {{ns.level}}
        icon_template: mdi:weather-windy

      dwd_current_warn_regen:
        friendly_name: "Regen"
        value_template: >
          {% set ns = namespace(found='off') %}
          {% for attr in states.sensor.dwd_weather_warnings_current_warning_level.attributes if attr.endswith('_type') -%}
              {% if states.sensor.dwd_weather_warnings_current_warning_level.attributes[attr] in [2, 42, 44, 45, 46, 48, 49, 61, 62, 63, 64, 65, 66, 95, 96] %}
                  {% set ns.found = 'on' %}
              {% endif %}
          {% endfor %}
          {{ns.found}}
        icon_template: mdi:weather-pouring
      dwd_current_warn_level_regen:
        friendly_name: "Regen Stufe"
        value_template: >
          {%- set ns = namespace(level=0) -%}
          {%- for i in range(0, states.sensor.dwd_weather_warnings_current_warning_level.attributes.warning_count) -%}
            {%- set type_attr= 'warning_'+loop.index|string + '_type' -%}
            {%- set lvl_attr=  'warning_'+loop.index|string + '_level' -%}
            {%- if states.sensor.dwd_weather_warnings_current_warning_level.attributes[type_attr] in [2, 42, 44, 45, 46, 48, 49, 61, 62, 63, 64, 65, 66, 95, 96] -%}
               {%- set ns.level = (ns.level, states.sensor.dwd_weather_warnings_current_warning_level.attributes[lvl_attr])|max  -%}
            {%- endif -%}
          {%- endfor -%}
          {{ns.level}}
        icon_template: mdi:weather-pouring

      dwd_current_warn_schnee:
        friendly_name: "Schnee"
        value_template: >
          {% set ns = namespace(found='off') %}
          {% for attr in states.sensor.dwd_weather_warnings_current_warning_level.attributes if attr.endswith('_type') -%}
              {% if states.sensor.dwd_weather_warnings_current_warning_level.attributes[attr] in [3, 70, 71, 72, 73, 74, 75, 76] %}
                  {% set ns.found = 'on' %}
              {% endif %}
          {% endfor %}
          {{ns.found}}
        icon_template: mdi:weather-snowy-heavy
      dwd_current_warn_level_schnee:
        friendly_name: "Schnee Stufe"
        value_template: >
          {%- set ns = namespace(level=0) -%}
          {%- for i in range(0, states.sensor.dwd_weather_warnings_current_warning_level.attributes.warning_count) -%}
            {%- set type_attr= 'warning_'+loop.index|string + '_type' -%}
            {%- set lvl_attr=  'warning_'+loop.index|string + '_level' -%}
            {%- if states.sensor.dwd_weather_warnings_current_warning_level.attributes[type_attr] in [3, 70, 71, 72, 73, 74, 75, 76] -%}
               {%- set ns.level = (ns.level, states.sensor.dwd_weather_warnings_current_warning_level.attributes[lvl_attr])|max  -%}
            {%- endif -%}
          {%- endfor -%}
          {{ns.level}}
        icon_template: mdi:weather-snowy-heavy

      dwd_current_warn_glaette:
        friendly_name: "Glätte"
        value_template: >
          {% set ns = namespace(found='off') %}
          {% for attr in states.sensor.dwd_weather_warnings_current_warning_level.attributes if attr.endswith('_type') -%}
              {% if states.sensor.dwd_weather_warnings_current_warning_level.attributes[attr] in [6, 24, 84, 85, 87] %}
                  {% set ns.found = 'on' %}
              {% endif %}
          {% endfor %}
          {{ns.found}}
        icon_template: mdi:snowflake-alert
      dwd_current_warn_level_glaette:
        friendly_name: "Glätte Stufe"
        value_template: >
          {%- set ns = namespace(level=0) -%}
          {%- for i in range(0, states.sensor.dwd_weather_warnings_current_warning_level.attributes.warning_count) -%}
            {%- set type_attr= 'warning_'+loop.index|string + '_type' -%}
            {%- set lvl_attr=  'warning_'+loop.index|string + '_level' -%}
            {%- if states.sensor.dwd_weather_warnings_current_warning_level.attributes[type_attr] in [6, 24, 84, 85, 87] -%}
               {%- set ns.level = (ns.level, states.sensor.dwd_weather_warnings_current_warning_level.attributes[lvl_attr])|max  -%}
            {%- endif -%}
          {%- endfor -%}
          {{ns.level}}
        icon_template: mdi:snowflake-alert

      dwd_current_warn_frost:
        friendly_name: "Frost"
        value_template: >
          {% set ns = namespace(found='off') %}
          {% for attr in states.sensor.dwd_weather_warnings_current_warning_level.attributes if attr.endswith('_type') -%}
              {% if states.sensor.dwd_weather_warnings_current_warning_level.attributes[attr] in [5, 22, 82] %}
                  {% set ns.found = 'on' %}
              {% endif %}
          {% endfor %}
          {{ns.found}}
        icon_template: mdi:thermometer-alert
      dwd_current_warn_level_frost:
        friendly_name: "Frost Stufe"
        value_template: >
          {%- set ns = namespace(level=0) -%}
          {%- for i in range(0, states.sensor.dwd_weather_warnings_current_warning_level.attributes.warning_count) -%}
            {%- set type_attr= 'warning_'+loop.index|string + '_type' -%}
            {%- set lvl_attr=  'warning_'+loop.index|string + '_level' -%}
            {%- if states.sensor.dwd_weather_warnings_current_warning_level.attributes[type_attr] in [5, 22, 82] -%}
               {%- set ns.level = (ns.level, states.sensor.dwd_weather_warnings_current_warning_level.attributes[lvl_attr])|max  -%}
            {%- endif -%}
          {%- endfor -%}
          {{ns.level}}
        icon_template: mdi:thermometer-alert

      dwd_current_warn_hagel:
        friendly_name: "Hagel"
        value_template: >
          {% set ns = namespace(found='off') %}
          {% for attr in states.sensor.dwd_weather_warnings_current_warning_level.attributes if attr.endswith('_type') -%}
              {% if states.sensor.dwd_weather_warnings_current_warning_level.attributes[attr] in [46, 48, 49, 95, 96] %}
                  {% set ns.found = 'on' %}
              {% endif %}
          {% endfor %}
          {{ns.found}}
        icon_template: mdi:weather-hail
      dwd_current_warn_level_hagel:
        friendly_name: "Hagel Stufe"
        value_template: >
          {%- set ns = namespace(level=0) -%}
          {%- for i in range(0, states.sensor.dwd_weather_warnings_current_warning_level.attributes.warning_count) -%}
            {%- set type_attr= 'warning_'+loop.index|string + '_type' -%}
            {%- set lvl_attr=  'warning_'+loop.index|string + '_level' -%}
            {%- if states.sensor.dwd_weather_warnings_current_warning_level.attributes[type_attr] in [46, 48, 49, 95, 96] -%}
               {%- set ns.level = (ns.level, states.sensor.dwd_weather_warnings_current_warning_level.attributes[lvl_attr])|max  -%}
            {%- endif -%}
          {%- endfor -%}
          {{ns.level}}          
        icon_template: mdi:weather-hail


###############################################################################
##  Automations
###############################################################################
automation:
  - id: send_notification_dwd_warning
    alias: send_notification_dwd_warning
    initial_state: True
    trigger:
      - platform: state
        entity_id: sensor.dwd_current_warn_count
      - platform: state
        entity_id: sensor.dwd_weather_warnings_current_warning_level
    condition:
      condition: and
      conditions:
      - "{{ states.sensor.dwd_current_warn_count.state | int(default=0) > 0 }}"
      - condition: state
        entity_id: input_boolean.dwd_weather_alert
        state: 'off'
#      - condition: state
#        entity_id: script.send_dwd_warn_mail
#        state: 'off'
      - condition: or
        conditions:
        - "{{ states.sensor.dwd_max_warn_level.state | int(default=0) >= 3 }}"
        - "{{ states.sensor.dwd_current_warn_level_sturm.state | int(default=0) >= 2 }}"
        - "{{ states.sensor.dwd_current_warn_level_gewitter.state | int(default=0) >= 2 }}"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.dwd_weather_alert
      - service: homeassistant.turn_on
        entity_id: script.send_dwd_warn_mail
  
  - id: reset_notification_dwd_warning
    alias: reset_notification_dwd_warning
    trigger:
      # keine DWD Warnungen mehr und Wetter-Alarm=an
      platform: template
      value_template: "{{ states.sensor.dwd_current_warn_count.state == '0'   
                          and is_state('input_boolean.dwd_weather_alert', 'on') }}"
      for:
        seconds: 1
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.dwd_weather_alert
      - service: notify.max
        data:
          title: 'Smart Home ...'
          message: delete_alert #'DWD Wetterwarnung aufgehoben.'
          data:
            push:
              badge: "{{ states.sensor.count_notification_alerts.state|int(default=0) }}"
              thread-id: 'wather-notification-group'
            apns_headers:
              'apns-collapse-id': 'dwd-weather-warning'

###############################################################################
##  Scripts & Shell Commands
###############################################################################
script:
  # Notification auf des Telefon und
  # versenden einer E-Mail mit der Liste aller DWD-Warnungen
  send_dwd_warn_mail:
    sequence:
      - delay:
          seconds: 10
      - service: notify.max
        data:
          title: 'DWD Wetterwarnung!'
          message: 'Aktuelle Warnung kommt per Mail.'
          data:
            subtitle: "{{ states.sensor.dwd_current_warn_count.state}} {% if states.sensor.dwd_current_warn_count.state|int(default=0) == 1 %}Warnung{% else %}Warnungen {% endif %} mit max. Stufe {{states.sensor.dwd_max_warn_level.state}}."
            push:
              badge: "{{ states.sensor.count_notification_alerts.state|int(default=0) }}"
              thread-id: 'wather-notification-group'
            apns_headers:
              'apns-collapse-id': 'dwd-weather-warning'
              url: /lovelace/weather
    #- service: shell_command.get_warn_image
      #- delay:
      #    minutes: 1
      - service: notify.gmx_smtp
        data:
          title: 'DWD Wetterwarnung!'
          message: ' '
          data:
            images:
              - warnungen_gemeinde_map_baw.png
            html: >
              <!DOCTYPE html><html><head><style>a, h3, h4 {font-family: arial;}</style></head><body>
              <h3>{{ state_attr('sensor.dwd_weather_warnings_current_warning_level','region_name') }}</h3>
              Aktuell 
              {% if states('sensor.dwd_current_warn_count')|int(default=0) == 1 %}
                besteht {{ states('sensor.dwd_current_warn_count') }} Warnung 
              {% else %}
                bestehen {{ states('sensor.dwd_current_warn_count') }} Warnungen 
              {% endif %}
              mit der maximalen Stufe {{ states('sensor.dwd_max_warn_level') }}.
              {%- for i in range(0, state_attr('sensor.dwd_weather_warnings_current_warning_level','warning_count')) -%}
                {%- set type_attr=  'warning_'+loop.index|string + '_type' -%}
                {%- set lvl_attr=   'warning_'+loop.index|string + '_level' -%}
                {%- set head_attr=  'warning_'+loop.index|string + '_headline' -%}
                {%- set start_attr= 'warning_'+loop.index|string + '_start' -%}
                {%- set end_attr=   'warning_'+loop.index|string + '_end' -%}
                {%- set desc_attr=  'warning_'+loop.index|string + '_description' -%}
                <hr/>
                <em>
                {%- set start_time= state_attr('sensor.dwd_weather_warnings_current_warning_level',start_attr) -%}
                {%- set days = (start_time.strftime('%j') | int(default=0)) - (now().strftime('%j')) | int(default=0)  -%}
                {% if as_timestamp(start_time) <= as_timestamp(now()) %}
                jetzt
                {% elif days==0 %}
                heute
                {% elif days==1 %}
                morgen
                {% else %}
                in {{days}} Tagen
                {% endif %}
                </em>
                <h3>{{ state_attr('sensor.dwd_weather_warnings_current_warning_level',head_attr) }}</h3>
                <em>Warnstufe:</em> <strong>{{ state_attr('sensor.dwd_weather_warnings_current_warning_level',lvl_attr) }}</strong>
                <br>
                <em>Von:</em> {{ as_timestamp(state_attr('sensor.dwd_weather_warnings_current_warning_level',start_attr)) | timestamp_custom('%a %d.%m %H:%M',true) }}
                <br>
                <em>Bis:</em> {{ as_timestamp(state_attr('sensor.dwd_weather_warnings_current_warning_level',end_attr)) | timestamp_custom('%a %d.%m %H:%M',true) }}
                <br>
                {{ state_attr('sensor.dwd_weather_warnings_current_warning_level',desc_attr) }}
                <br>
                <br>
              {%- endfor -%}
              <a href='http://www.dwd.de/DWD/warnungen/warnapp_gemeinden/json/warnungen_gemeinde_map_baw.png'>Aktuelle Warnkarte</a>
              <br>
              <img class='rounded' alt='Warnkarte' src='cid:warnungen_gemeinde_map_baw.png' /></body></html>

#todo: geht noch nicht. Pfade? ohne geht nicht, mit auch nicht. Return Code 1.
# Debug:
# ssh <user>@<dsm>
# sudo docker exec -it Home-Assistant bash
# /usr/bin/wget https://www.dwd.de/DWD/warnungen/warnapp_gemeinden/json/warnungen_gemeinde_map_baw.png -q -O /data/warnungen_gemeinde_map_baw.png
# --> wget: error getting response: Connection reset by peer
# Aufruf geht in DSM-Shell
shell_command:
  get_warn_image: '/usr/bin/wget http://www.dwd.de/DWD/warnungen/warnapp_gemeinden/json/warnungen_gemeinde_map_baw.png -q -O /data/warnungen_gemeinde_map_baw.png'
  