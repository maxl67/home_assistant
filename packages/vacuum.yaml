###############################################################################
#   @author       : Max Reigl
#   @date         : 16.11.2021
#   @package      : vacuum
#   @description  : XIAOMI Roborock S6 automation
#   @links        : 
# Token ermittelt nach: https://www.home-assistant.io/components/vacuum.xiaomi_miio/#retrieving-the-access-token
# Idee: https://github.com/stanvx/Home-Assistant-Configuration/blob/master/packages/xiaomi_robot_vacuum.yaml
#  und: @author: Trent Stanton, @date: 19/05/2018
# Card: https://community.home-assistant.io/t/xiaomi-vacuum-cleaner-card/64456/7
#       https://github.com/marcogazzola/Home-assistant-help/blob/master/Xiaomi-Vacuum/pkg_vacuum_xiaomi.yaml
# Room: https://community.home-assistant.io/t/xiaomi-vacuum-s1-s60-t60-s61-t61-room-cleaning-by-room-name/122315/16
#       Room-ID's: automatic generated rooms in XIAOMI app get id=1..15, custom defined rooms get an id starting from 16.
###############################################################################

################################################
##  Customize
################################################
homeassistant:
  customize:
  # definitions
    package.node_anchors:
      common: &common
        package: 'vacuum'
  # constants 
      no_selection_text: &no_selection_text Bitte auswählen
      int_minutes_delay_AutoCleanup_after_departure: &int_minutes_delay_AutoCleanup_after_departure 2 #default: 2
  # colours:
      bg_gray: &bg_gray "#3d3d3d"
      bg_yellow: &bg_yellow [249, 197, 54] #xiaomi-app: [254, 206, 78]
      bg_blue: &bg_blue [82, 147, 226] #xiaomi-app:[130, 190, 254]
      bg_red: &bg_red [254, 148, 119]
      bg_green: &bg_green [42, 204, 186]
  # groups, variables
    input_boolean.automatic_vacuum_when_home:
      icon: mdi:account-multiple-check #todo: off: mdi:account-cancel
      <<: *common
    input_boolean.automatic_vacuum_first_run:
      icon: mdi:calendar-check
      <<: *common
    input_boolean.disable_automatic_vacuum:
      <<: *common
    input_boolean.disable_dustbin_notification:
      <<: *common
    input_boolean.alert_dustbin_full:
      <<: *common
    input_select.vacuum_room:
      icon: mdi:floor-plan
      <<: *common
    input_select.vacuum_last_cleaned_room:
      <<: *common
    switch.enable_automatic_vacuum:
      <<: *common
    switch.automatic_vacuum_when_home:
      <<: *common
    switch.enable_dustbin_notification:
      <<: *common
    switch.alert_dustbin_full:
      <<: *common
      
  # rest of sensors, automations, etc. not with attribute 'package' because relation to this package is clear.
  

################################################
##   Platforms
################################################
#v2021.3: Integration added through UI
#vacuum:
#  - platform: xiaomi_miio
#    host: !secret xiaomi_vacuum_ip
#    token: !secret xiaomi_vacuum_token
#    #name: xiaomi_vacuum_cleaner

# https://community.home-assistant.io/t/xiaomi-cloud-vacuum-map-extractor/231292
# https://github.com/PiotrMachowski/Home-Assistant-custom-components-Xiaomi-Cloud-Map-Extractor
camera:
  - platform: xiaomi_cloud_map_extractor
    host: !secret xiaomi_vacuum_ip
    token: !secret xiaomi_vacuum_token
    username: !secret xiaomi_cloud_username
    password: !secret xiaomi_cloud_password
    draw: ['all']
    auto_update: true
    store_map_image: true
    scan_interval:
      seconds: 5
    attributes:
      - calibration_points
    map_transformation:
      scale: 1.3
      trim:
        top: 16
        bottom: 20
        left: 21
        right: 23
    colors:
      color_map_outside: [67,73,84] 
      color_map_wall_v2: [225, 225, 225]
      color_path: [28,28,28]
      color_goto_path: [0, 255, 0]
    room_colors:
      1:  *bg_blue   #'Bad' : [1], blau
      16: *bg_red    #'Küche' : [16], rot
      17: *bg_blue   #'Wohnzimmer' : [17], blau
      18: *bg_yellow #'Gästezimmer' : [18], gelb
      19: *bg_yellow #'Esszimmer' : [19], gelb
      20: *bg_yellow #'Schlafzimmer' : [20], gelb
      21: *bg_green  #'Diele & Flur' : [21], grün
      22: *bg_blue   #'Gästebad' : [22], blau

###############################################################################
##  Variables
###############################################################################
switch:
  - platform: template
    switches: ## are needed in addition to input_booleans to get a dynamic icon
      enable_automatic_vacuum:
        friendly_name: Automatische Reinigung 
        value_template: "{% if states.input_boolean.disable_automatic_vacuum.state %}{{ is_state('input_boolean.disable_automatic_vacuum', 'off') }}{% endif %}"
        turn_on:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.disable_automatic_vacuum
        turn_off:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.disable_automatic_vacuum
        icon_template: >-
          {% if is_state('input_boolean.disable_automatic_vacuum', 'on') %}
            mdi:timer-off-outline
          {% else %}
            mdi:timer-cog-outline
          {% endif %}
      automatic_vacuum_when_home:
        friendly_name: Reinigung auch wenn anwesend 
        value_template: "{{ is_state('input_boolean.automatic_vacuum_when_home', 'on') }}"
        turn_on:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.automatic_vacuum_when_home
        turn_off:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.automatic_vacuum_when_home
        icon_template: >-
          {% if is_state('input_boolean.automatic_vacuum_when_home', 'on') %}
            mdi:account-check-outline
          {% else %}
            mdi:account-off-outline
          {% endif %}
      enable_dustbin_notification:
        friendly_name: Staubbehälternachrichten  
        value_template: "{{ is_state('input_boolean.disable_dustbin_notification', 'off') }}"
        turn_on:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.disable_dustbin_notification
        turn_off:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.disable_dustbin_notification
        icon_template: >-
          {% if is_state('input_boolean.disable_dustbin_notification', 'on') %}
            mdi:cellphone-message-off
          {% else %}
            mdi:cellphone-message
          {% endif %}
      alert_dustbin_full:
        friendly_name: Staubbehälter leeren   #dustbin has to be cleaned  
        value_template: "{{ is_state('input_boolean.alert_dustbin_full', 'on') }}"
        turn_on:
          service: homeassistant.turn_on
          data:
            entity_id: input_boolean.alert_dustbin_full
        turn_off:
          service: homeassistant.turn_off
          data:
            entity_id: input_boolean.alert_dustbin_full
        icon_template: >-
          {% if is_state('input_boolean.alert_dustbin_full', 'on') %}
            mdi:delete-alert
          {% else %}
            mdi:delete-outline
          {% endif %}

input_boolean:
  disable_automatic_vacuum:
    name: Automatische Reinigung aus #disable vacuum automation
  automatic_vacuum_when_home:
    name: Reinigung auch wenn anwesend #cleanup even though somebody is home
    initial: off
  automatic_vacuum_first_run:
    name: automatische Reinigung heute gestartet  #cleanup was already started today
  disable_dustbin_notification:
    name: Staubbehälternachrichten aus #disable dustbin notification
  alert_dustbin_full:
    name: Staubbehälter leeren  #dustbin has to be cleaned
    icon: mdi:delete-alert

input_select:
  vacuum_room:
    name: Choose a room to clean
    options:
      - *no_selection_text #Please select
      - Küche
      - Esszimmer
      - Wohnzimmer
      - Diele & Flur
      - Bad
      - Schlafzimmer
      - Gästebad
      - Gästezimmer
      - Kü,Sz,B
      - Kü,Ez,D&F
    initial: *no_selection_text #Please select

  # remember last cleaned areas
  vacuum_last_cleaned_room: 
    name: zuletzt gesaugt #last cleaned room
    options:
      - alles (auto)
      - Kü,Sz,B (auto)
      - ---
      - Küche
      - Esszimmer
      - Wohnzimmer
      - Diele & Flur
      - Bad
      - Schlafzimmer
      - Gästebad
      - Gästezimmer
      - --
      - Kü,Sz,B
      - Kü,Ez,D&F

    initial: ---
    icon: mdi:broom

###############################################################################
##  Sensors
###############################################################################
binary_sensor:
  - platform: template
    sensors:
      vacuum_paused:
        value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner','status') in ['Paused'] }}"    
      vacuum_started:
        value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner','status') in ['Cleaning', 'Definition missing for state 18'] }}"    

      alert_vacuum_error:
        friendly_name: Saug-E Störung
        icon_template: mdi:robot-confused-outline #alert-octagon
        value_template: "{{ is_state('vacuum.xiaomi_vacuum_cleaner','error') }}"

sensor:
  - platform: template
    sensors: 
      # this sensor is needed to display last cleaning area  in entity card
      vacuum_cleaned_room:
        value_template: "{{ states.input_select.vacuum_last_cleaned_room.state }}"
        friendly_name: 'cleaned room history'
        icon_template: 'mdi:broom'

  - platform: template
    sensors:
#      vacuum_status:
#        friendly_name: Vacuum status
#        value_template: >
#          {% set val =  state_attr('vacuum.xiaomi_vacuum_cleaner','status')  %}
#          {% if val == 'Definition missing for state 18' %}
#            Cleaning room
#          {% else %}
#            {{ state_attr('vacuum.xiaomi_vacuum_cleaner','status') }}
#          {% endif %}
#        icon_template: >
#          {% set val =  state_attr('vacuum.xiaomi_vacuum_cleaner','status')  %}
#          {% if val == 'Charging' or val == 'Angedockt' %}
#            mdi:battery-charging
#          {% elif val == 'Cleaning' or val == 'Reinigen' %}
#            mdi:move-resize
#          {% elif val == 'Returning home' or val == 'Rückkehr zur Dockingstation' %}
#            mdi:keyboard-return
#          {% elif val == 'Idle' or val == 'Standby' %}
#            mdi:dots-horizontal
#          {% elif val == 'Paused' or val == 'Pausiert' %}
#            mdi:pause-circle 
#          {% else %}
#            mdi:help-circle
#          {% endif %}
#      vacuum_fan_speed:
#        friendly_name: Fan Speed
#        value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner','fan_speed') }}"
#        icon_template: 'mdi:speedometer'
#      vacuum_battery:
#        friendly_name: Vacuum Battery
#        value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner','battery_level') }}"
#        unit_of_measurement: '%'
#        icon_template: "{{ 'mdi:battery' if (state_attr('vacuum.xiaomi_vacuum_cleaner','battery_icon') is none) else state_attr('vacuum.xiaomi_vacuum_cleaner','battery_icon') }}"
      vacuum_cleaning_time:
        friendly_name: Time of Last Cycle
        value_template: "{{ (states('sensor.roborock_vacuum_s6_last_clean_duration')|float(default=0) / 60) | round(0) }}"
        unit_of_measurement: 'min'
        icon_template: 'mdi:timer'
      vacuum_cleaned_area:
        friendly_name: Area of Last Cycle
        unit_of_measurement: 'm²'
        value_template: "{{ states('sensor.roborock_vacuum_s6_last_clean_area')|float(default=0) | round(1) }}"
        icon_template: 'mdi:ruler'
      vacuum_cleanmainbrush:
        friendly_name: Hauptbürste
        unit_of_measurement: 'h'
        value_template: "{{ (states('sensor.roborock_vacuum_s6_main_brush_left')|float(default=0) / 3600) | round(0) }}" 
        icon_template: 'mdi:screwdriver'
      vacuum_cleansidebrush:
        friendly_name: Seitenbürste
        unit_of_measurement: 'h'
        value_template: "{{ (states('sensor.roborock_vacuum_s6_side_brush_left')|float(default=0) / 3600) | round(0) }}" 
        icon_template: 'mdi:screwdriver'
      vacuum_cleanfilter:
        friendly_name: Filter
        unit_of_measurement: 'h'
        value_template: "{{ (states('sensor.roborock_vacuum_s6_filter_left')|float(default=0) / 3600) | round(0) }}"
        icon_template: 'mdi:screwdriver'
      vacuum_sensordirtyleft:
        friendly_name: Sensoren
        unit_of_measurement: 'h'
        value_template: "{{ (states('sensor.roborock_vacuum_s6_sensor_dirty_left')|float(default=0) / 3600) | round(0) }}"
        icon_template: 'mdi:screwdriver'
#      vacuum_do_not_disturb:
#        friendly_name: Do Not Disturb
#        value_template: "{{ state_attr('vacuum.xiaomi_vacuum_cleaner','do_not_disturb') }}"
#        icon_template: >
#          {% set val =  state_attr('vacuum.xiaomi_vacuum_cleaner','do_not_disturb') %}
#          {% if val == 'on' %}
#            mdi:minus-circle
#          {% else %}
#            mdi:minus-circle-off
#          {% endif %}


###############################################################################
##  Scripts
###############################################################################
script:
#  ## would like to have one script for that. todo: check conditions and new interface
#  vacuum_resume:
#    sequence:
#      - service: vacuum.start  #todo: this is not the resume like in the xiaomi app (lower right corner button). will not resume after pausing a room cleaning!
#        entity_id: vacuum.xiaomi_vacuum_cleaner
#  vacuum_pause:
#    sequence:
#      - service: vacuum.pause
#        entity_id: vacuum.xiaomi_vacuum_cleaner

  ## start a complete cleanup
  vacuum_all:
    alias: 'Start vacuum the appartment'
    sequence:
      # when a cleanup was started manually, we do not want to start an additional automatic run the same day.
      - service: homeassistant.turn_on
        entity_id: input_boolean.automatic_vacuum_first_run
      - service: vacuum.start
        entity_id: vacuum.xiaomi_vacuum_cleaner
      # store the last cleaned area
      - delay:
          seconds: 1
      - service: input_select.select_option
        data:
          entity_id: input_select.vacuum_last_cleaned_room
          option: 'alles (auto)'

  ## start cleaning a room (or some romms), that was/were selected by input_select 'vacuum_room'
  #  this script translates a roomname into the room id for xiaomi interface
  vacuum_room:
    alias: 'Start room cleaning'
    sequence:
      # get room-id
      - service: script.vacuum_selected_rooms
        data: 
          my_roomid: >
            {{ {
            'Küche' : [16],
            'Esszimmer' : [19],
            'Wohnzimmer' : [17],
            'Diele & Flur' : [21],
            'Bad' : [1], 
            'Schlafzimmer' : [20],  
            'Gästebad' : [22],
            'Gästezimmer' : [18], 
            'Kü,Sz,B (auto)' : [16,20,1], 
            'Kü,Sz,B' : [16,20,1],
            'Kü,Ez,D&F': [16,19,21]
            } [my_roomname] }}
      # store the last cleaned room
      - delay:
          seconds: 1
      - service: input_select.select_option
        data_template:
          entity_id: input_select.vacuum_last_cleaned_room
          option: "{{ my_roomname }}"
      # reset selection in input box
      - delay:
          seconds: 4
      - service: input_select.select_option
        data:
          entity_id: input_select.vacuum_room
          option: *no_selection_text

  ## Script for cleaning a specific room. Calls the XIAOMI interface with room-id
  vacuum_selected_rooms:
    alias: 'Clean rooms'
    sequence:
      - service: vacuum.send_command
        data:
          entity_id: vacuum.xiaomi_vacuum_cleaner
          command: app_segment_clean
          params: > #e.g. [18] or [18,1,2]. needs v0.118 to work (array as param).
            {{ my_roomid }} 

  vacuum_update_map:
    sequence:
      - service: camera.turn_on
        data:
          entity_id: camera.xiaomi_cloud_map_extractor
      - service: camera.turn_off
        data:
          entity_id: camera.xiaomi_cloud_map_extractor

###############################################################################
##  Automations
###############################################################################
automation:
  #-------------------------------
  ## Start cleaning a room when 'input_select.vacuum_room' is changed
  - id: vacuum_start_roomcleaning
    alias: Start cleaning room
    trigger:
    - platform: state
      entity_id: input_select.vacuum_room
      from: *no_selection_text
    action:
      - service: script.vacuum_room
        data:
          my_roomname: "{{ states.input_select.vacuum_room.state }}"
   
  #-------------------------------------------
  ## automated full cleanup and partly cleanup
  ## full: Monday (or Tuesday if delayed) between 8:00 and 17:00 if nobody is at home (or automatic_vacuum_when_home='on')
  ## partly: Thursday (or Friday if delayed) between 8:00 and 17:00, if nobody is at home (or automatic_vacuum_when_home='on')
  - id: vacuum_start_cleanup
    alias: Start automatic cleanup
    mode: single
    trigger:
      # last person left (gone for 2 min)
      - platform: state
        entity_id: sensor.home_status
        from: 'Home'
        to: 'Away'
        for:
          minutes: *int_minutes_delay_AutoCleanup_after_departure
      # at 8:02, if everybody already has left earlier 
      - platform: time
        at: '08:02:00'
      # change in options variables
      - platform: state
        entity_id: input_boolean.disable_automatic_vacuum
        to: 'off'
      - platform: state
        entity_id: input_boolean.automatic_vacuum_when_home
        to: 'on'
        for:
          seconds: 5
    condition:
      condition: and
      conditions:
        # automation is turned on and cleaning not done earlier today...
        - condition: state
          entity_id: input_boolean.disable_automatic_vacuum
          state: 'off'
        - condition: state
          entity_id: input_boolean.automatic_vacuum_first_run
          state: 'off'
        # ...and the correct weekday and time...
        - condition: time
          weekday:
            - mon
            - tue
            - thu
            - fri
          after: '08:00:00'
          before: '17:00:00'
        # ...and not on vacation...
        - condition: template
          value_template: "{{ states('sensor.home_status') != 'Extended Away' }}"
        # ...and nobody home OR option 'automatic_vacuum_when_home' is set
        - condition: or
          conditions:
            - condition: state
              entity_id: sensor.home_status
              state: 'Away'
            - condition: state
              entity_id: input_boolean.automatic_vacuum_when_home
              state: 'on'
    variables: 
    # we have to set the variables here, because setting values insite choose block will not reflect outside
      cleanup_area: "{{ 'full' if (now().weekday() in [0,1]) else 'partly'}}"
      messagetext: >
        {{ 'wöchentliches Saugen der gesamten Wohnung wurde gestartet.' if (cleanup_area=='full') 
           else 'wöchentliches Saugen von Küche, Schlafzimmer und Bad wurde gestartet.'}}
      cleanup_duration: "{{ '01:50:00' if (cleanup_area=='full') else '00:45:00'}}"
    action:
      # wait a moment and then 
      - delay: '00:00:05'
      # choose what to clean
      - choose:
        # full cleanup on Mondays
        - conditions:
          - condition: time
            weekday:
              - mon
              - tue
          sequence:
            - service: script.vacuum_all
            #does not work here (v2020.12.0)
            #- variables:
            #    messagetext: 'wöchentliches Saugen der gesamten Wohnung wurde gestartet.'
            #    cleanup_duration: '01:50:00'
        # partly cleanup on Thursdays
        - conditions:
          - condition: time
            weekday:
              - thu
              - fri
          sequence:
            - service: script.vacuum_room
              data:
                my_roomname: 'Kü,Sz,B (auto)'
            #does not work here (v2020.12.0)
            #- variables:
            #    messagetext: 'wöchentliches Saugen von Küche, Schlafzimmer und Bad wurde gestartet.'
            #    cleanup_duration: '00:45:00'
        #default:
            # nothing to do on other days
      # wait until robot has left the bay
      - delay: '00:00:10'
      # remember, that we have already done the cleaning today
      - service: homeassistant.turn_on
        entity_id: input_boolean.automatic_vacuum_first_run
      # send notification
      - service: notify.family_main_devices
        data:
          title: 'Automatisierung Dust-E'
          message: "{{ messagetext }}"
          data:
            push:
              thread-id: 'vacuum-notification-group'
            apns_headers:
              'apns-collapse-id': 'vacuum-auto-cleanup'
            clickAction: '/lovelace/vacuum'
      - delay: "{{ cleanup_duration }}"
      - service: homeassistant.turn_on
        entity_id: input_boolean.alert_dustbin_full

  #-------------------------------
  ## Reset the variable 'automatic_vacuum_first_run' at midnight so that a new automatic cleanup can be triggered the next day.
  ## Mon and Thu cleanup can be delayed to Tue and Fri, so we dont reset Tue and Fri morning.
  - id: vacuum_reset_first_run
    alias: Reset Vacuum First Run state at midnight #(only one automatic run per day)
    trigger:
    - platform: time
      at: '00:30:00'
    condition:
    - condition: time
      weekday:
        - mon
        #- tue
        - wed
        - thu
        #- fri
        - sat
        - sun
    action:
    - service: homeassistant.turn_off
      entity_id: input_boolean.automatic_vacuum_first_run

  #-------------------------------
  ## Send a notification to the first person arriving at home after an automatic cleanup was triggered
  - id: send_alert_after_automatic_vacuum_to_empty_dustbin
    alias: Send alert after automatic vacuum to empty the dustbin
    trigger:
      - platform: state
        entity_id: sensor.home_status
        to: 'Home'
        for:
          minutes: 1
      - platform: state
        entity_id: input_boolean.disable_dustbin_notification
        to: 'off'
      - platform: state
        entity_id: vacuum.xiaomi_vacuum_cleaner
        to: 'docked'
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: sensor.home_status
          state: 'Home'
        - condition: state
          entity_id: input_boolean.alert_dustbin_full
          state: 'on'
        - condition: state
          entity_id: input_boolean.disable_dustbin_notification
          state: 'off'
        - condition: time
          after: '07:30:00'
          before: '23:00:00'
        - condition: template
          # last time this automation was triggered is more than 1800secs=30min ago
# todo: 11/21. das geht nicht, da state_attr('automation.send_alert_after_automatic_vacuum_to_empty_the_dustbin','last_triggered') immer none liefert
          value_template: >
            {% if state_attr('automation.send_alert_after_automatic_vacuum_to_empty_the_dustbin','last_triggered') is not none %}
              {% if as_timestamp(now()) | int(default=0) - as_timestamp(state_attr('automation.send_alert_after_automatic_vacuum_to_empty_the_dustbin','last_triggered')) | int(default=0) > 1800 %} 
                true 
              {% else %} 
                false
              {% endif %}
            {% else %}
              true
            {% endif %}
        - condition: state
          entity_id: vacuum.xiaomi_vacuum_cleaner
          state: 'docked'
    action:
      - service: >
          {% if (states('sensor.max_status') in ['Home', 'Just Arrived']) and (states('sensor.ing_status') in ['Home', 'Just Arrived']) %}
            notify.family_main_devices
          {% elif states('sensor.max_status') in ['Home', 'Just Arrived'] %}
            notify.max
          {% elif states('sensor.ing_status') in ['Home', 'Just Arrived'] %}
            notify.ing
          {% else %}
            notify.max          
          {% endif %}
        data: 
          title: 'Staubbehälter leeren' 
          message: 'Nach dem automatischen Saugen den Staubbehälter von Dust-E leeren.'
          data:
            push:
              thread-id: 'vacuum-notification-group'
              apns_headers:
                'apns-collapse-id': 'vacuum-auto-cleanup'
              clickAction: '/lovelace/vacuum'
        #todo: actionable notification: 'Done'

  #-------------------------------
  # Notify devices if vacuum reports error status
  - alias: Notify all - Vacuum Error
    id: send_notification_vacuum_error
    trigger:
      # vacuum has state 'error'
      - platform: state
        entity_id: binary_sensor.alert_vacuum_error 
        to: 'on'
        for:
          seconds: 6
    condition:
      - condition: state
        entity_id: binary_sensor.alert_vacuum_error
        state: 'on'
    action:
      - service: notify.family_main_devices
        data:
          title: 'Smart Home Alerts'
          message: 'Dust-E hat einen Fehlerstatus.'
          data:
            subtitle: 'Dust-E Error!'
            push:
              badge: "{{states.sensor.count_notification_alerts.state|int(default=0)}}"
              thread-id: 'vacuum-notification-group'
            apns_headers:
              'apns-collapse-id': 'vacuum-error-detected'
            clickAction: '/lovelace/vacuum'

  - alias: Reset alert - Vacuum Error
    id: reset_notification_vacuum_error
    trigger:
      - platform: state
        entity_id: binary_sensor.alert_vacuum_error
        from: 'on'
        to: 'off'
    condition:
      - condition: state
        entity_id: binary_sensor.alert_vacuum_error
        state: 'off'
    action:
      - service: notify.family_main_devices
        data:
          title: 'Smart Home ...'
          message: 'Dust-E Fehler behoben.'
          data:
            push:
              badge: "{{states.sensor.count_notification_alerts.state|int(default=0)}}"
              thread-id: 'vacuum-notification-group'
            apns_headers:
              'apns-collapse-id': 'vacuum-error-detected'
            clickAction: '/lovelace/vacuum'