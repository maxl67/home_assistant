###############################################################################
#   @author       : Max Reigl
#   @date         : 01.12.2020
#   @package      : media
#   @description  : media devices and player
#   @links        : 
#     samsungtv_tizen: https://github.com/jaruba/ha-samsungtv-tizen/blob/master/Smartthings.md
###############################################################################

################################################
##  Customize
################################################
homeassistant:
  customize:
  # definitions
    package.node_anchors:
      common: &common
        package: 'media'
  # constants 
      receiver_entityid: &receiver_entityid media_player.r_n803d_86ae28
      tv_entityid: &tv_entityid media_player.samsungtv
  # groups, variables
    group.mediadevices_in_use:
      <<: *common
  # sensors
    binary_sensor.netreceiver_online:
      <<: *common
    sensor.netreceiver_is_used:
      icon: mdi:music-box
      <<: *common
    sensor.entertainment_scenario:
      <<: *common
  # automations
    script.start_bd_show:
      <<: *common
    script.start_tv_show:
      <<: *common
    script.start_radio:
      <<: *common
    script.start_cd:
      <<: *common
  # automations
    automation.power_off_unused_mediarack:
      <<: *common
    automation.power_on_mediarack_for_use:
      <<: *common
    automation.set_scene_movies:
      <<: *common


################################################
##   Platforms
################################################
media_player:
# v2021.7: Integration über UI
#  - platform: yamaha_musiccast #platform 'yamaha' does not work
#    host: !secret yamaha_netreceiver
#    interval_seconds: 30
  
  - platform: samsungtv_tizen
    name: samsungtv
    host: !secret samsung_tv_ip
    mac: !secret samsung_tv_mac
    source_list: '{"TV": "KEY_TV", "HDMI": "KEY_HDMI"}'
#app_list klappt auch nicht.
    #app_list: "{'DS video': '111399002250', 'YouTube': '111299001912'}"
    #app_list: "{'ARD Mediathek':'??', 'ZDF mediathek':'??', 'DS video': '111399002250', 'YouTube': '111299001912', 'Rakuten TV': '??'}"
# klappt nicht. Device wird in der Samsung-api als offline angezeigt. api_key ist evtl auch abgelaufen.
# wenn diese werte aktiviert werden, dann klappt der media_player nicht mehr.
#    api_key: "b3c028ad-affd-4f18-9369-643cb355d8a2"
#    device_id: "f1a1ad77-5565-4406-bdae-4192b1fc6525" #oder: 48c3c7a0-f7f3-45a7-b497-a81d5ebf21af

#Panasonic DP-UB424 (ohne Funktion)
  #- platform: panasonic_bluray
  #  host: !secret panasonic_bluray
  #  #name: panasonic_blu_ray

# Zugriff Radio Bad geht, wird aber nicht gebraucht
  - platform: frontier_silicon
    name: Radio Bad
    host: !secret radio_bad_ip


###############################################################################
##  Groups
###############################################################################
group:
  # group is 'on' if at least one device is 'on'
  mediadevices_in_use:
    name: TV oder Music ist an
    icon: mdi:account-music
    entities:
      - sensor.netreceiver_is_used
      - *tv_entityid
    #  - binary_sensor.smarttv


###############################################################################
##  Sensors
###############################################################################
binary_sensor:
  - platform: ping
    name: netreceiver_online
    host: !secret yamaha_netreceiver
    scan_interval: 30
    count: 2

sensor:
  - platform: template
    sensors:
      netreceiver_is_used:
        friendly_name: 'Yamaha R-N803 in Benutzung'
        value_template: >
          {%- if states('media_player.r_n803d_86ae28') in ['unavailable','unknown'] -%}
            off
          {%-  elif not states('media_player.r_n803d_86ae28') in ['off','idle'] 
                 and is_state('binary_sensor.netreceiver_online','on') -%}
            on
          {%- else -%}
            off
          {%-  endif -%}

      entertainment_scenario:
        friendly_name: 'Unterhaltungs Szenario'
        value_template: >
          {%- if states('media_player.r_n803d_86ae28') in ['unavailable','unknown','off'] 
                and states('media_player.samsungtv') in ['unavailable','unknown','off'] -%}
            off
          {%-  elif not states('media_player.r_n803d_86ae28') in ['off','idle'] 
                 and state_attr('media_player.r_n803d_86ae28','source') == 'tuner' -%}
            radio
          {%-  elif not states('media_player.r_n803d_86ae28') in ['off'] 
                 and state_attr('media_player.r_n803d_86ae28','source') in ['coaxial1','line_cd'] -%}
            cd
          {%-  elif not states('media_player.r_n803d_86ae28') in ['off','idle'] 
                 and state_attr('media_player.r_n803d_86ae28','source') in ['optical1'] 
                 and not states('media_player.samsungtv') in ['off'] -%}
            cinema
          {%-  elif states('media_player.r_n803d_86ae28') in ['off','idle'] 
                 and not states('media_player.samsungtv') in ['off'] -%}
            tv
          {%- else -%}
            unknown
          {%-  endif -%}


###############################################################################
##  Scripts
###############################################################################
script:
  start_bd_show:
    alias: Blue-Ray anschauen
    sequence:
      # TV und Receiver einschalten
      - service: media_player.turn_on
        data:
          entity_id: *tv_entityid
      - service: media_player.turn_on
        data:
          entity_id: *receiver_entityid
      - delay: '00:00:03'
      # Lautstärke TV ausschalten
      - service: media_player.volume_set
        data:
          volume_level: 0
        target:
          entity_id: *tv_entityid
      # Quelle: HDMI1=BlueRay-Player
      - service: media_player.play_media
        data:
          entity_id: *tv_entityid
          media_content_id: KEY_HDMI
          media_content_type: "send_key"
      # Verstärker
      - service: media_player.select_source
        target:
          entity_id: *receiver_entityid
        data:
          source: optical1
      #- delay: '00:00:05'
      # BlueRay-Player: Netzwerk > Hera > Video auswählen
      #- service: media_player.play_media
      #  data:
      #    entity_id: *tv_entityid
#todo: das klappt noch nicht
      #    media_content_id: KEY_RIGHT+KEY_RIGHT+KEY_RIGHT+KEY_RETURN+KEY_RETURN+500+KEY_RETURN+KEY_DOWN+KEY_DOWN+KEY_ENTER
      #    media_content_type: "send_key"

  start_tv_show:
    alias: TV anschauen
    sequence:
      # TV einschalten
      - service: media_player.turn_on
        data:
          entity_id: media_player.samsungtv
      - delay: '00:00:03'
      # Lautstärke TV auf 20 einstellen
      - service: media_player.volume_set
        data:
          volume_level: 0.2
        target:
          entity_id: media_player.samsungtv
      # Quelle: TV (todo: geht noch nicht)
      - service: media_player.play_media
        data:
          entity_id: media_player.samsungtv
          media_content_id: KEY_TV
          media_content_type: "send_key"
      # Verstärker ausschalten
      - service: media_player.select_source
        target:
          entity_id: *receiver_entityid
        data:
          source: tuner
      - delay: '00:00:02'
      - service: media_player.turn_off
        data:
          entity_id: *receiver_entityid

  start_radio:
    alias: Radio hören
    sequence:
      # Receeiver ein- & TV ausschalten 
      - service: media_player.turn_off
        data:
          entity_id: media_player.samsungtv
      - service: media_player.turn_on
        data:
          entity_id: *receiver_entityid
      - delay: '00:00:03'
      # Verstärker umstellen auf Radio
      - service: media_player.select_source
        target:
          entity_id: *receiver_entityid
        data:
          source: tuner

  start_cd:
    alias: CD hören
    sequence:
      # Receeiver ein- & TV ausschalten 
      - service: media_player.turn_off
        data:
          entity_id: media_player.samsungtv
      - service: media_player.turn_on
        data:
          entity_id: *receiver_entityid
      - delay: '00:00:03'
      # Verstärker umstellen auf CD
      - service: media_player.select_source
        target:
          entity_id: *receiver_entityid
        data:
          source: coaxial1 #or line_cd

#TV: Keys for remote control
#  TV keys: https://github.com/jaruba/ha-samsungtv-tizen/blob/master/Key_codes.md
#  Media player: https://www.home-assistant.io/integrations/media_player/
  rc_power_off:
    alias: power off
    sequence:
    - choose:
      # IF receiver is 'on' 
      - conditions: "{{ not is_state('media_player.r_n803d_86ae28', 'off') }}"
        sequence:
          service: media_player.turn_off
          data:
            entity_id: *receiver_entityid
      # ELSE TV
      default:
      - service: script.tv_send_key
        data:
          my_key_code: KEY_POWER #KEY_POWERON, KEY_POWEROFF
  rc_source_tv:
    alias: source tv
    sequence:
    - choose:
      # IF receiver is 'on' 
      - conditions: "{{ not is_state('media_player.r_n803d_86ae28', 'off') }}"
        sequence:
          service: media_player.select_source
          data:
            entity_id: *receiver_entityid
            source: optical1
      # ELSE TV
      default:
      - service: script.tv_send_key
        data:
          my_key_code: KEY_TV #KEY_DTV oder KEY_ANTENA
  rc_source_disc:
    alias: source CD/DVD
    sequence:
    - choose:
      # IF receiver is 'on' 
      - conditions: "{{ not is_state('media_player.r_n803d_86ae28', 'off') }}"
        sequence:
          service: media_player.select_source
          data:
            entity_id: *receiver_entityid
            source: coaxial1
      # ELSE TV
      default:
      - service: script.tv_send_key
        data:
          my_key_code: KEY_HDMI
  rc_volume_mute:
    alias: mute volume
    sequence:
    - service: media_player.volume_mute
      data:
        entity_id: *receiver_entityid
        is_volume_muted: "{{ not state_attr('media_player.r_n803d_86ae28','is_volume_muted') }}"
    - service: script.tv_send_key
      data:
        my_key_code: KEY_MUTE
  rc_volume_down:
    alias: volume down
    sequence:
      - choose:
        # IF receiver is 'on' and (set to optical=TV or TV is off)
        - conditions: "{{ states('media_player.r_n803d_86ae28') in ['idle','playing'] and (state_attr('media_player.r_n803d_86ae28','source') == 'optical1' or is_state('media_player.samsungtv', 'off')) }}"
          sequence:
          #todo: besser in kleineren schritten
            service: media_player.volume_down
            data:
              entity_id: *receiver_entityid
        # ELSE TV
        default:
          - service: script.tv_send_key
            data:
              my_key_code: KEY_VOLDOWN
  rc_volume_up:
    alias: volume up
    sequence:
      - choose:
        # IF receiver is 'on' and (set to optical=TV or TV is off)
        - conditions: "{{ states('media_player.r_n803d_86ae28') in ['idle','playing'] and (state_attr('media_player.r_n803d_86ae28','source') == 'optical1' or is_state('media_player.samsungtv', 'off')) }}"
          sequence:
          #todo: besser in kleineren schritten
            service: media_player.volume_up
            data:
              entity_id: *receiver_entityid
        # ELSE TV
        default:
          - service: script.tv_send_key
            data:
              my_key_code: KEY_VOLUP
  #todo Channel: wenn blueRay-Player an, deaktivieren.
  rc_channel_down:
    alias: channel down
    sequence:
      - choose:
        # IF receiver is 'on' and (set to optical=Tuner)
        - conditions: "{{ states('media_player.r_n803d_86ae28') in ['idle','playing'] and state_attr('media_player.r_n803d_86ae28','source') == 'tuner' }}"
          sequence:
          #todo: besser in kleineren schritten
            service: media_player.media_previous_track
            data:
              entity_id: *receiver_entityid
        # ELSE TV
        default:
          - service: script.tv_send_key
            data:
              my_key_code: KEY_CHDOWN
  rc_channel_up:
    alias: channel up
    sequence:
      - choose:
        # IF receiver is 'on' and (set to optical=Tuner)
        - conditions: "{{ states('media_player.r_n803d_86ae28') in ['idle','playing'] and state_attr('media_player.r_n803d_86ae28','source') == 'tuner' }}"
          sequence:
          #todo: besser in kleineren schritten
            service: media_player.media_next_track
            data:
              entity_id: *receiver_entityid
        # ELSE TV
        default:
          - service: script.tv_send_key
            data:
              my_key_code: KEY_CHUP
  rc_key_blue:
    alias: key blue
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_CYAN
  rc_key_green:
    alias: kex green
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_GREEN
  rc_key_yellow:
    alias: key yellow
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_YELLOW
  rc_key_red:
    alias: key red
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_RED
  rc_key_up:
    alias: navigation up
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_UP
  rc_key_down:
    alias: navigation up
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_DOWN
  rc_key_left:
    alias: navigation left
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_LEFT
  rc_key_right:
    alias: navigation right
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_RIGHT
  rc_key_back:
    alias: navigation back
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_RETURN
  rc_key_enter:
    alias: navigation enter
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_ENTER
  rc_key_home:
    alias: navigation home
  #todo: wenn BR an, dann home an BR-player 
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_HOME

  rc_key_rewind:
    alias: media rewind
    sequence:
      - choose:
        # IF receiver is 'on' and (set to server)
        - conditions: "{{ states('media_player.r_n803d_86ae28') in ['idle','playing'] and state_attr('media_player.r_n803d_86ae28','source') == 'server' }}"
          sequence:
          #todo: besser in kleineren schritten
            service: media_player.media_previous_track
            data:
              entity_id: *receiver_entityid
        # ELSE TV
        default:
          - service: script.tv_send_key
            data:
              my_key_code: KEY_REWIND
  rc_key_forward:
    alias: media forward
    sequence:
      - choose:
        # IF receiver is 'on' and (set to server)
        - conditions: "{{ states('media_player.r_n803d_86ae28') in ['idle','playing'] and state_attr('media_player.r_n803d_86ae28','source') == 'server' }}"
          sequence:
          #todo: besser in kleineren schritten
            service: media_player.media_next_track
            data:
              entity_id: *receiver_entityid
        # ELSE TV
        default:
          - service: script.tv_send_key
            data:
              my_key_code: KEY_FF
  rc_key_play:
    alias: media play
    sequence:
      - choose:
        # IF receiver is 'on' and (set to server)
        - conditions: "{{ states('media_player.r_n803d_86ae28') in ['idle','playing'] and state_attr('media_player.r_n803d_86ae28','source') == 'server' }}"
          sequence:
          #todo: besser in kleineren schritten
            service: media_player.media_play
            data:
              entity_id: *receiver_entityid
        # ELSE TV
        default:
        - service: script.tv_send_key
          data:
            my_key_code: KEY_PLAY
  rc_key_stop:
    alias: media stop
    sequence:
      - choose:
        # IF receiver is 'on' and (set to server)
        - conditions: "{{ states('media_player.r_n803d_86ae28') in ['idle','playing'] and state_attr('media_player.r_n803d_86ae28','source') == 'server' }}"
          sequence:
          #todo: besser in kleineren schritten
            service: media_player.media_stop
            data:
              entity_id: *receiver_entityid
        # ELSE TV
        default:
        - service: script.tv_send_key
          data:
            my_key_code: KEY_STOP
  rc_key_pause:
    alias: media pause
    sequence:
      - choose:
        # IF receiver is 'on' and (set to server)
        - conditions: "{{ states('media_player.r_n803d_86ae28') in ['idle','playing'] and state_attr('media_player.r_n803d_86ae28','source') == 'server' }}"
          sequence:
          #todo: besser in kleineren schritten
            service: media_player.media_pause
            data:
              entity_id: *receiver_entityid
        # ELSE TV
        default:
        - service: script.tv_send_key
          data:
            my_key_code: KEY_PAUSE
  rc_key_record:
    alias: media record
    sequence:
    - service: script.tv_send_key
      data:
        my_key_code: KEY_REC

  tv_send_key:
    alias: send key to TV
    sequence:
    - service: media_player.play_media
      data:
        entity_id: media_player.samsungtv
        media_content_id: "{{ my_key_code }}"
        media_content_type: "send_key"
#  receiver_send_key:
#    alias: send key to receiver
# not working

###############################################################################
#                               Automations
###############################################################################
automation:
  #----------------------------------------------------------------------------------
  # Medien-Rack: Standby der Geräte nachts und tagsüber vermeiden.
  # Ausschalten des Medien-Racks nachts, wenn es nicht mehr benutzt ist
  - id: power_off_unused_mediarack
    alias: switch off unused media rack at night
    trigger: 
      - platform: time
        at: '00:10:00'
      - platform: state
        entity_id: group.mediadevices_in_use
        to: 'off'
        for:
          minutes: 15
      - platform: state
        entity_id: input_boolean.disable_power_automation
        to: 'off'
    condition:
      # 'power_automation' aktiv UND Home status 'Away'
      condition: and
      conditions:
      - condition: or
        conditions:
          - condition: time
            after: '23:00:00'
          - condition: time
            before: '07:30:00'    
      - condition: state
        entity_id: group.mediadevices_in_use
        state: 'off'
      - condition: state
        entity_id: input_boolean.disable_power_automation
        state: 'off'
    action:
      - service: switch.turn_off
        entity_id: switch.osram_plug_01_a1bf020a_3

  # Einschalten des Media Racks nachmittags, wenn wir zuhause sind
  - id: power_on_mediarack_for_use
    alias: switch on media rack for use
    trigger:
      - platform: time
        at: '17:00:00'
        id: 'afternoon'
      - platform: time
        at: '07:00:00'
        id: 'morning'
      - platform: state
        entity_id: input_boolean.disable_power_automation
        to: 'off'
    condition:
      # 'power_automation' aktiv UND Home status 'Home' UND WLAN ist an
      condition: and
      conditions:
      - condition: state
        entity_id: input_boolean.disable_power_automation
        state: 'off'
      - condition: state
        entity_id: sensor.home_status
        state: 'Home'
      - condition: state
        entity_id: switch.fritz_dect_200_netz
        state: 'on'
      # UND am Wochenende/Feiertag morgens, sonst nachmittags
      - condition: or
        conditions:
          - condition: trigger
            id: 'afternoon'
          - condition: and
            conditions:
              - condition: trigger
                id: 'morning'
              - condition: state
                entity_id: 'binary_sensor.workday_sensor'
                state: 'off'
    action:
      - service: switch.turn_on
        entity_id: switch.osram_plug_01_a1bf020a_3

  #----------------------------------------------------------------------------------
  # Licht-Szene für Fernsehen
  - id: set_scene_movies
    alias: Scene 'Movies' 
    trigger:
      - platform: state
        entity_id: media_player.samsungtv 
        to: 'on'
      - platform: state
        entity_id: binary_sensor.smarttv #in addition to media_player, until that one will work correctly
        to: 'on'
      - platform: state
        entity_id: light.0008da499c8dbd
        to: 'on'
    condition:
      condition: and
      conditions:
      - condition: or
        conditions:
          - condition: state
            entity_id: media_player.samsungtv
            state: 'on'
          - condition: state
            entity_id: binary_sensor.smarttv #in addition to media_player, until that one will work correctly
            state: 'on'
      - condition: state
        entity_id: light.0008da499c8dbd
        state: 'on'
      - condition: state
        entity_id: input_boolean.disable_power_automation
        state: 'off'
    action:
      # speichern des aktuellen Licht-Zustands...
      - service: python_script.light_store
        data:
          store_name: dw_signal_store
          entity_id:
            - light.0008da499c8dbd
          overwrite: true
          all_attribs: true  #saves last color and brightness, even if state='off'. turn light on shortly
      - service: scene.turn_on
        data:
          entity_id: scene.movies
          transition: 2 #[sec] langsamer Übergang

#todo: neue Automation für rücksetzen des Lichts wenn fernseher wieder aus ist      